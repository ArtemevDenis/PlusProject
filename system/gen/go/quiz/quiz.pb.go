// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: quiz/quiz.proto

package ssov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusType int32

const (
	StatusType_OK    StatusType = 0
	StatusType_ERROR StatusType = 1
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	StatusType_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_quiz_quiz_proto_enumTypes[0].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_quiz_quiz_proto_enumTypes[0]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{0}
}

type QuestionType int32

const (
	QuestionType_SINGLE_CHOICE   QuestionType = 0
	QuestionType_MULTIPLE_CHOICE QuestionType = 1
	QuestionType_FREE_TEXT       QuestionType = 2
	QuestionType_SCALE           QuestionType = 3
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "SINGLE_CHOICE",
		1: "MULTIPLE_CHOICE",
		2: "FREE_TEXT",
		3: "SCALE",
	}
	QuestionType_value = map[string]int32{
		"SINGLE_CHOICE":   0,
		"MULTIPLE_CHOICE": 1,
		"FREE_TEXT":       2,
		"SCALE":           3,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_quiz_quiz_proto_enumTypes[1].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_quiz_quiz_proto_enumTypes[1]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{1}
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	mi := &file_quiz_quiz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{0}
}

type GenerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GenerateResponse) Reset() {
	*x = GenerateResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateResponse) ProtoMessage() {}

func (x *GenerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateResponse.ProtoReflect.Descriptor instead.
func (*GenerateResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteQuizRequest) Reset() {
	*x = DeleteQuizRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizRequest) ProtoMessage() {}

func (x *DeleteQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuizRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteQuizRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteQuizResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusType `protobuf:"varint,1,opt,name=status,proto3,enum=quiz.StatusType" json:"status,omitempty"`
}

func (x *DeleteQuizResponse) Reset() {
	*x = DeleteQuizResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizResponse) ProtoMessage() {}

func (x *DeleteQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuizResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteQuizResponse) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_OK
}

type QuestionOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Text string  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *QuestionOption) Reset() {
	*x = QuestionOption{}
	mi := &file_quiz_quiz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionOption) ProtoMessage() {}

func (x *QuestionOption) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionOption.ProtoReflect.Descriptor instead.
func (*QuestionOption) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionOption) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *QuestionOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId  string `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	OptionId    string `protobuf:"bytes,2,opt,name=option_id,json=optionId,proto3" json:"option_id,omitempty"`
	DependentOn string `protobuf:"bytes,3,opt,name=dependent_on,json=dependentOn,proto3" json:"dependent_on,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	mi := &file_quiz_quiz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{5}
}

func (x *Dependency) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *Dependency) GetOptionId() string {
	if x != nil {
		return x.OptionId
	}
	return ""
}

func (x *Dependency) GetDependentOn() string {
	if x != nil {
		return x.DependentOn
	}
	return ""
}

// Question представляет вопрос в опроснике
type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string           `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Text         string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Type         QuestionType      `protobuf:"varint,3,opt,name=type,proto3,enum=quiz.QuestionType" json:"type,omitempty"`
	Options      []*QuestionOption `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	MinValue     *int32            `protobuf:"varint,5,opt,name=min_value,json=minValue,proto3,oneof" json:"min_value,omitempty"`
	MaxValue     *int32            `protobuf:"varint,6,opt,name=max_value,json=maxValue,proto3,oneof" json:"max_value,omitempty"`
	IsRequired   bool              `protobuf:"varint,7,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	Dependencies []*Dependency     `protobuf:"bytes,8,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_quiz_quiz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{6}
}

func (x *Question) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Question) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Question) GetType() QuestionType {
	if x != nil {
		return x.Type
	}
	return QuestionType_SINGLE_CHOICE
}

func (x *Question) GetOptions() []*QuestionOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Question) GetMinValue() int32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *Question) GetMaxValue() int32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *Question) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *Question) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type QuestionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Answer     string  `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	QuestionId string  `protobuf:"bytes,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	UserId     string  `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *QuestionAnswer) Reset() {
	*x = QuestionAnswer{}
	mi := &file_quiz_quiz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnswer) ProtoMessage() {}

func (x *QuestionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnswer.ProtoReflect.Descriptor instead.
func (*QuestionAnswer) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{7}
}

func (x *QuestionAnswer) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *QuestionAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionAnswer) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionAnswer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddAnswersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers []*QuestionAnswer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *AddAnswersRequest) Reset() {
	*x = AddAnswersRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAnswersRequest) ProtoMessage() {}

func (x *AddAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAnswersRequest.ProtoReflect.Descriptor instead.
func (*AddAnswersRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{8}
}

func (x *AddAnswersRequest) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type AddAnswersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusType `protobuf:"varint,1,opt,name=status,proto3,enum=quiz.StatusType" json:"status,omitempty"`
}

func (x *AddAnswersResponse) Reset() {
	*x = AddAnswersResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAnswersResponse) ProtoMessage() {}

func (x *AddAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAnswersResponse.ProtoReflect.Descriptor instead.
func (*AddAnswersResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{9}
}

func (x *AddAnswersResponse) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_OK
}

type GetAnswersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId string `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
}

func (x *GetAnswersRequest) Reset() {
	*x = GetAnswersRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswersRequest) ProtoMessage() {}

func (x *GetAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswersRequest.ProtoReflect.Descriptor instead.
func (*GetAnswersRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{10}
}

func (x *GetAnswersRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

type GetAnswersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers []*QuestionAnswer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *GetAnswersResponse) Reset() {
	*x = GetAnswersResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswersResponse) ProtoMessage() {}

func (x *GetAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswersResponse.ProtoReflect.Descriptor instead.
func (*GetAnswersResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{11}
}

func (x *GetAnswersResponse) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

// Survey представляет опросник
type UpdateQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	RewardPoints *int32                 `protobuf:"varint,4,opt,name=reward_points,json=rewardPoints,proto3,oneof" json:"reward_points,omitempty"`
	IsAnonymous  bool                   `protobuf:"varint,5,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	Questions    []*Question            `protobuf:"bytes,6,rep,name=questions,proto3" json:"questions,omitempty"`
	Author       string                 `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Editable     bool                   `protobuf:"varint,8,opt,name=editable,proto3" json:"editable,omitempty"`
	Public       bool                   `protobuf:"varint,9,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *UpdateQuizRequest) Reset() {
	*x = UpdateQuizRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizRequest) ProtoMessage() {}

func (x *UpdateQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuizRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateQuizRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateQuizRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateQuizRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *UpdateQuizRequest) GetRewardPoints() int32 {
	if x != nil && x.RewardPoints != nil {
		return *x.RewardPoints
	}
	return 0
}

func (x *UpdateQuizRequest) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *UpdateQuizRequest) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *UpdateQuizRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *UpdateQuizRequest) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *UpdateQuizRequest) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type UpdateQuizResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusType `protobuf:"varint,1,opt,name=status,proto3,enum=quiz.StatusType" json:"status,omitempty"`
}

func (x *UpdateQuizResponse) Reset() {
	*x = UpdateQuizResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizResponse) ProtoMessage() {}

func (x *UpdateQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuizResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateQuizResponse) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_OK
}

type GetQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetQuizRequest) Reset() {
	*x = GetQuizRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuizRequest) ProtoMessage() {}

func (x *GetQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuizRequest.ProtoReflect.Descriptor instead.
func (*GetQuizRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{14}
}

func (x *GetQuizRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetQuizResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	RewardPoints int32                  `protobuf:"varint,4,opt,name=reward_points,json=rewardPoints,proto3" json:"reward_points,omitempty"`
	IsAnonymous  bool                   `protobuf:"varint,5,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	Questions    []*Question            `protobuf:"bytes,6,rep,name=questions,proto3" json:"questions,omitempty"`
	Author       string                 `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Editable     bool                   `protobuf:"varint,8,opt,name=editable,proto3" json:"editable,omitempty"`
	Public       bool                   `protobuf:"varint,9,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *GetQuizResponse) Reset() {
	*x = GetQuizResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuizResponse) ProtoMessage() {}

func (x *GetQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuizResponse.ProtoReflect.Descriptor instead.
func (*GetQuizResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{15}
}

func (x *GetQuizResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetQuizResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetQuizResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetQuizResponse) GetRewardPoints() int32 {
	if x != nil {
		return x.RewardPoints
	}
	return 0
}

func (x *GetQuizResponse) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *GetQuizResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *GetQuizResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *GetQuizResponse) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *GetQuizResponse) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type GetResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetResultRequest) Reset() {
	*x = GetResultRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultRequest) ProtoMessage() {}

func (x *GetResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultRequest.ProtoReflect.Descriptor instead.
func (*GetResultRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{16}
}

func (x *GetResultRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers []*QuestionAnswer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *GetResultResponse) Reset() {
	*x = GetResultResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultResponse) ProtoMessage() {}

func (x *GetResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultResponse.ProtoReflect.Descriptor instead.
func (*GetResultResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{17}
}

func (x *GetResultResponse) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

var File_quiz_quiz_proto protoreflect.FileDescriptor

var file_quiz_quiz_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x71, 0x75, 0x69, 0x7a, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75,
	0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x22, 0xc9, 0x02, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22,
	0xdb, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x20, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x2a, 0x1f, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0x50, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x49,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x03, 0x32, 0xa3,
	0x03, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x16, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17,
	0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x14, 0x5a, 0x12, 0x74, 0x75, 0x7a, 0x6f, 0x76, 0x2e, 0x73, 0x73,
	0x6f, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x73, 0x6f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_quiz_quiz_proto_rawDescOnce sync.Once
	file_quiz_quiz_proto_rawDescData = file_quiz_quiz_proto_rawDesc
)

func file_quiz_quiz_proto_rawDescGZIP() []byte {
	file_quiz_quiz_proto_rawDescOnce.Do(func() {
		file_quiz_quiz_proto_rawDescData = protoimpl.X.CompressGZIP(file_quiz_quiz_proto_rawDescData)
	})
	return file_quiz_quiz_proto_rawDescData
}

var file_quiz_quiz_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_quiz_quiz_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_quiz_quiz_proto_goTypes = []any{
	(StatusType)(0),               // 0: quiz.StatusType
	(QuestionType)(0),             // 1: quiz.QuestionType
	(*Void)(nil),                  // 2: quiz.Void
	(*GenerateResponse)(nil),      // 3: quiz.GenerateResponse
	(*DeleteQuizRequest)(nil),     // 4: quiz.DeleteQuizRequest
	(*DeleteQuizResponse)(nil),    // 5: quiz.DeleteQuizResponse
	(*QuestionOption)(nil),        // 6: quiz.QuestionOption
	(*Dependency)(nil),            // 7: quiz.Dependency
	(*Question)(nil),              // 8: quiz.Question
	(*QuestionAnswer)(nil),        // 9: quiz.QuestionAnswer
	(*AddAnswersRequest)(nil),     // 10: quiz.AddAnswersRequest
	(*AddAnswersResponse)(nil),    // 11: quiz.AddAnswersResponse
	(*GetAnswersRequest)(nil),     // 12: quiz.GetAnswersRequest
	(*GetAnswersResponse)(nil),    // 13: quiz.GetAnswersResponse
	(*UpdateQuizRequest)(nil),     // 14: quiz.UpdateQuizRequest
	(*UpdateQuizResponse)(nil),    // 15: quiz.UpdateQuizResponse
	(*GetQuizRequest)(nil),        // 16: quiz.GetQuizRequest
	(*GetQuizResponse)(nil),       // 17: quiz.GetQuizResponse
	(*GetResultRequest)(nil),      // 18: quiz.GetResultRequest
	(*GetResultResponse)(nil),     // 19: quiz.GetResultResponse
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
}
var file_quiz_quiz_proto_depIdxs = []int32{
	0,  // 0: quiz.DeleteQuizResponse.status:type_name -> quiz.StatusType
	1,  // 1: quiz.Question.type:type_name -> quiz.QuestionType
	6,  // 2: quiz.Question.options:type_name -> quiz.QuestionOption
	7,  // 3: quiz.Question.dependencies:type_name -> quiz.Dependency
	9,  // 4: quiz.AddAnswersRequest.answers:type_name -> quiz.QuestionAnswer
	0,  // 5: quiz.AddAnswersResponse.status:type_name -> quiz.StatusType
	9,  // 6: quiz.GetAnswersResponse.answers:type_name -> quiz.QuestionAnswer
	20, // 7: quiz.UpdateQuizRequest.end_date:type_name -> google.protobuf.Timestamp
	8,  // 8: quiz.UpdateQuizRequest.questions:type_name -> quiz.Question
	0,  // 9: quiz.UpdateQuizResponse.status:type_name -> quiz.StatusType
	20, // 10: quiz.GetQuizResponse.end_date:type_name -> google.protobuf.Timestamp
	8,  // 11: quiz.GetQuizResponse.questions:type_name -> quiz.Question
	9,  // 12: quiz.GetResultResponse.answers:type_name -> quiz.QuestionAnswer
	2,  // 13: quiz.Quiz.Generate:input_type -> quiz.Void
	14, // 14: quiz.Quiz.Update:input_type -> quiz.UpdateQuizRequest
	4,  // 15: quiz.Quiz.Delete:input_type -> quiz.DeleteQuizRequest
	16, // 16: quiz.Quiz.Get:input_type -> quiz.GetQuizRequest
	10, // 17: quiz.Quiz.AddAnswer:input_type -> quiz.AddAnswersRequest
	12, // 18: quiz.Quiz.GetAnswers:input_type -> quiz.GetAnswersRequest
	18, // 19: quiz.Quiz.GetResult:input_type -> quiz.GetResultRequest
	3,  // 20: quiz.Quiz.Generate:output_type -> quiz.GenerateResponse
	15, // 21: quiz.Quiz.Update:output_type -> quiz.UpdateQuizResponse
	5,  // 22: quiz.Quiz.Delete:output_type -> quiz.DeleteQuizResponse
	17, // 23: quiz.Quiz.Get:output_type -> quiz.GetQuizResponse
	11, // 24: quiz.Quiz.AddAnswer:output_type -> quiz.AddAnswersResponse
	13, // 25: quiz.Quiz.GetAnswers:output_type -> quiz.GetAnswersResponse
	19, // 26: quiz.Quiz.GetResult:output_type -> quiz.GetResultResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_quiz_quiz_proto_init() }
func file_quiz_quiz_proto_init() {
	if File_quiz_quiz_proto != nil {
		return
	}
	file_quiz_quiz_proto_msgTypes[4].OneofWrappers = []any{}
	file_quiz_quiz_proto_msgTypes[6].OneofWrappers = []any{}
	file_quiz_quiz_proto_msgTypes[7].OneofWrappers = []any{}
	file_quiz_quiz_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quiz_quiz_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quiz_quiz_proto_goTypes,
		DependencyIndexes: file_quiz_quiz_proto_depIdxs,
		EnumInfos:         file_quiz_quiz_proto_enumTypes,
		MessageInfos:      file_quiz_quiz_proto_msgTypes,
	}.Build()
	File_quiz_quiz_proto = out.File
	file_quiz_quiz_proto_rawDesc = nil
	file_quiz_quiz_proto_goTypes = nil
	file_quiz_quiz_proto_depIdxs = nil
}
