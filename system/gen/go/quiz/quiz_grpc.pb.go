// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: quiz/quiz.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Quiz_Generate_FullMethodName   = "/quiz.Quiz/Generate"
	Quiz_Update_FullMethodName     = "/quiz.Quiz/Update"
	Quiz_Delete_FullMethodName     = "/quiz.Quiz/Delete"
	Quiz_Get_FullMethodName        = "/quiz.Quiz/Get"
	Quiz_AddAnswer_FullMethodName  = "/quiz.Quiz/AddAnswer"
	Quiz_GetAnswers_FullMethodName = "/quiz.Quiz/GetAnswers"
	Quiz_GetResult_FullMethodName  = "/quiz.Quiz/GetResult"
)

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	Generate(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GenerateResponse, error)
	Update(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error)
	Delete(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error)
	Get(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error)
	AddAnswer(ctx context.Context, in *AddAnswersRequest, opts ...grpc.CallOption) (*AddAnswersResponse, error)
	GetAnswers(ctx context.Context, in *GetAnswersRequest, opts ...grpc.CallOption) (*GetAnswersResponse, error)
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) Generate(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, Quiz_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) Update(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuizResponse)
	err := c.cc.Invoke(ctx, Quiz_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) Delete(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuizResponse)
	err := c.cc.Invoke(ctx, Quiz_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) Get(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizResponse)
	err := c.cc.Invoke(ctx, Quiz_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) AddAnswer(ctx context.Context, in *AddAnswersRequest, opts ...grpc.CallOption) (*AddAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAnswersResponse)
	err := c.cc.Invoke(ctx, Quiz_AddAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) GetAnswers(ctx context.Context, in *GetAnswersRequest, opts ...grpc.CallOption) (*GetAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnswersResponse)
	err := c.cc.Invoke(ctx, Quiz_GetAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponse)
	err := c.cc.Invoke(ctx, Quiz_GetResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServer is the server API for Quiz service.
// All implementations must embed UnimplementedQuizServer
// for forward compatibility.
type QuizServer interface {
	Generate(context.Context, *Void) (*GenerateResponse, error)
	Update(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error)
	Delete(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error)
	Get(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	AddAnswer(context.Context, *AddAnswersRequest) (*AddAnswersResponse, error)
	GetAnswers(context.Context, *GetAnswersRequest) (*GetAnswersResponse, error)
	GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error)
	mustEmbedUnimplementedQuizServer()
}

// UnimplementedQuizServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizServer struct{}

func (UnimplementedQuizServer) Generate(context.Context, *Void) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedQuizServer) Update(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedQuizServer) Delete(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedQuizServer) Get(context.Context, *GetQuizRequest) (*GetQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQuizServer) AddAnswer(context.Context, *AddAnswersRequest) (*AddAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswer not implemented")
}
func (UnimplementedQuizServer) GetAnswers(context.Context, *GetAnswersRequest) (*GetAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswers not implemented")
}
func (UnimplementedQuizServer) GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedQuizServer) mustEmbedUnimplementedQuizServer() {}
func (UnimplementedQuizServer) testEmbeddedByValue()              {}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s grpc.ServiceRegistrar, srv QuizServer) {
	// If the following call pancis, it indicates UnimplementedQuizServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Quiz_ServiceDesc, srv)
}

func _Quiz_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).Generate(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).Update(ctx, req.(*UpdateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).Delete(ctx, req.(*DeleteQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).Get(ctx, req.(*GetQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_AddAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).AddAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_AddAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).AddAnswer(ctx, req.(*AddAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_GetAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).GetAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_GetAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).GetAnswers(ctx, req.(*GetAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).GetResult(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quiz_ServiceDesc is the grpc.ServiceDesc for Quiz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quiz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _Quiz_Generate_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Quiz_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Quiz_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Quiz_Get_Handler,
		},
		{
			MethodName: "AddAnswer",
			Handler:    _Quiz_AddAnswer_Handler,
		},
		{
			MethodName: "GetAnswers",
			Handler:    _Quiz_GetAnswers_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _Quiz_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz/quiz.proto",
}
